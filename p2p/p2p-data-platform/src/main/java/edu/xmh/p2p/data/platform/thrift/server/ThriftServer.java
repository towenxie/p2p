/*
 * Copyright (c) 2015 Forte Tradebook, Inc. All rights reserved.
 */
package edu.xmh.p2p.data.platform.thrift.server;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.thrift.TMultiplexedProcessor;
import org.apache.thrift.TProcessor;
import org.apache.thrift.protocol.TCompactProtocol;
import org.apache.thrift.server.TServer;
import org.apache.thrift.server.TThreadedSelectorServer;
import org.apache.thrift.server.TThreadedSelectorServer.Args;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TNonblockingServerSocket;
import org.apache.thrift.transport.TNonblockingServerTransport;
import org.apache.thrift.transport.TTransportException;

import edu.xmh.p2p.data.common.util.SpringUtils;
import edu.xmh.p2p.data.platform.thrift.server.ThriftServerConfig.Server;
import edu.xmh.p2p.data.platform.thrift.server.ThriftServerConfig.Service;

/**
 * Configure the thrift server and serve in new thread.
 * 
 */
public class ThriftServer {
    private static final Logger logger = LogManager.getLogger(ThriftServer.class.getName());
    private static final int WAIT_FOR_SERVER_START = 5;
    private int port;
    private int selectorThreads;
    private int workerThreads;

    private TMultiplexedProcessor processor = new TMultiplexedProcessor();

    private TServer server;

    public ThriftServer(Server server) throws ClassNotFoundException, InstantiationException, IllegalAccessException,
            IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {

        // config server properties
        configServer(server);

        // register services
        registerServices(server.getServices());
    }

    /**
     * 
     * Start TThreadedSelectorServer thrift server in new thread.
     *
     */
    public void startServer() {
        new Thread(new Runnable() {

            @Override
            public void run() {
                startThreadedSelectorServer();
            }
        }).start();

        // wait for server to start
        while (null == server || !server.isServing()) {
            logger.debug("Waiting for thrift server to start at port: " + port);
            try {
                Thread.sleep(WAIT_FOR_SERVER_START);
            } catch (InterruptedException e) {
                logger.error(e.getMessage(), e);
            }
        }

        logger.info("Thrift server started at port: " + port);
    }

    /**
     * 
     * Stop thrift server.
     *
     */
    public void stopServer() {
        server.stop();
        logger.info("Thrift server stopped at port: " + port);
    }

    /**
     * 
     * Config server properties
     * 
     * @param server
     */
    private void configServer(Server server) {
        this.port = server.getPort();
        this.selectorThreads = server.getSelectorThreads();
        this.workerThreads = server.getWorkerThreads();
    }

    /**
     * 
     * Register services.
     * 
     * @param services services to register.
     * @throws ClassNotFoundException
     * @throws InstantiationException
     * @throws IllegalAccessException
     * @throws InvocationTargetException
     * @throws SecurityException
     * @throws NoSuchMethodException
     * @throws IllegalArgumentException
     */
    private void registerServices(Set<Service> services) throws ClassNotFoundException, InstantiationException,
            IllegalAccessException, InvocationTargetException, IllegalArgumentException, NoSuchMethodException,
            SecurityException {

        for (ThriftServerConfig.Service service : services) {
            for (ThriftServerConfig.Processor process : service.getProcessors()) {
                registerProcessor(service.getName(), process.getContractClass(), process.getHandlerClass());
            }
        }
    }

    /***
     * 
     * Register thrift processor.
     * 
     * @param serviceName name to identify the service
     * @param contractClassName contract class that generated by thrift
     * @param handlerClassName handler class that implement the contract class
     * @throws ClassNotFoundException
     * @throws InstantiationException
     * @throws IllegalAccessException
     * @throws IllegalArgumentException
     * @throws InvocationTargetException
     * @throws SecurityException
     * @throws NoSuchMethodException
     */
    private void registerProcessor(String serviceName, String contractClassName, String handlerClassName)
            throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException,
            InvocationTargetException, NoSuchMethodException, SecurityException {
        TProcessor processorInstance = null;
        // handler class that implement service' IFace
        System.out.println(handlerClassName);
        Class<?> handlerClass = Class.forName(handlerClassName);
        Object handlerInstance = SpringUtils.getBean(handlerClass);

        // get static inner class of generated service class
        Class<?> processorClass = Class.forName(contractClassName + "$Processor");
        Constructor<?> con = processorClass.getConstructor(handlerClass.getInterfaces()[0]);
        processorInstance = (TProcessor) con.newInstance(handlerInstance);

        processor.registerProcessor(serviceName, processorInstance);

    }

    /***
     * 
     * Configure the server args and start server.
     *
     */
    private void startThreadedSelectorServer() {
        TNonblockingServerTransport serverTransport = null;
        try {
            serverTransport = new TNonblockingServerSocket(port);
        } catch (TTransportException e) {
            logger.error(e.getMessage(), e);
        }

        Args args = new Args(serverTransport).processor(processor);
        args.protocolFactory(new TCompactProtocol.Factory());
        args.transportFactory(new TFramedTransport.Factory());
        if (selectorThreads != 0) {
            args.selectorThreads(selectorThreads);
        }

        if (workerThreads != 0) {
            args.workerThreads(workerThreads);
        }

        logger.info("Starting thrift server at port: " + port);
        server = new TThreadedSelectorServer(args);
        server.serve();
    }
}
